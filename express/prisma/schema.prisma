generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(255)
  email    String @unique(map: "email_UNIQUE") @db.VarChar(255)
  nic      String @unique(map: "nic_UNIQUE") @db.VarChar(20)
  mobile   String @db.VarChar(255)
  username String @unique(map: "username_UNIQUE") @db.VarChar(45)
  password String @db.VarChar(45)
}

model assistant {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(255)
  email    String @db.VarChar(255)
  nic      String @unique(map: "nic_UNIQUE") @db.VarChar(20)
  mobile   String @db.VarChar(11)
  username String @unique(map: "username_UNIQUE") @db.VarChar(45)
  password String @db.VarChar(45)
}

model bankdetails {
  id            Int        @id @default(autoincrement())
  bank_name     String     @db.VarChar(45)
  branch        String     @db.VarChar(45)
  account_no    String     @db.VarChar(45)
  account_owner String     @db.VarChar(255)
  supplier      supplier[]
}

model brand {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  shoes             shoes[]
  supplierhasbrands supplierhasbrands[]
}

model cashier {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  email    String    @db.VarChar(255)
  nic      String    @db.VarChar(20)
  mobile   String    @db.VarChar(11)
  userName String    @db.VarChar(45)
  password String    @db.VarChar(45)
  invoice  invoice[]
}

model category {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(45)
  shoeshascategory shoeshascategory[]
}

model colors {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  shoeshascolors shoeshascolors[]
}

model customer {
  id         Int        @id @default(autoincrement())
  firstName  String     @db.VarChar(45)
  lastName   String     @db.VarChar(45)
  email      String     @unique(map: "email_UNIQUE") @db.VarChar(255)
  password   String     @db.VarChar(45)
  created_at DateTime   @db.Timestamp(0)
  deleted_at DateTime?  @db.Timestamp(0)
  wishlist   wishlist[]
}

model images {
  id         Int     @id @default(autoincrement())
  path       String  @db.VarChar(255)
  Product_id Int
  product    product @relation(fields: [Product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Images_Product1")

  @@index([Product_id], map: "fk_Images_Product1_idx")
}

model invoice {
  id          Int           @id @default(autoincrement())
  Invoice_at  DateTime      @db.Timestamp(0)
  Cashier_id  Int
  discount    Int           @default(5)
  cashier     cashier       @relation(fields: [Cashier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Invoice_Cashier1")
  invoiceitem invoiceitem[]

  @@index([Cashier_id], map: "fk_Invoice_Cashier1_idx")
}

model invoiceitem {
  id              Int          @id @default(autoincrement()) @db.UnsignedInt
  qty             Int
  total           Float
  StockDetails_id Int
  Invoice_id      Int
  invoice         invoice      @relation(fields: [Invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_InvoiceItem_Invoice1")
  stockdetails    stockdetails @relation(fields: [StockDetails_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_InvoiceItem_StockDetails1")

  @@index([Invoice_id], map: "fk_InvoiceItem_Invoice1_idx")
  @@index([StockDetails_id], map: "fk_InvoiceItem_StockDetails1_idx")
}

model orderdetails {
  id         Int     @id @default(autoincrement())
  qty        Int
  Orders_id  Int
  Product_id Int
  orders     orders  @relation(fields: [Orders_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_OrderDetails_Orders1")
  product    product @relation(fields: [Product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_OrderDetails_Product1")

  @@index([Orders_id], map: "fk_OrderDetails_Orders1_idx")
  @@index([Product_id], map: "fk_OrderDetails_Product1_idx")
}

model orders {
  id           Int            @id @default(autoincrement())
  paid_amount  Float          @default(0)
  ordered_at   DateTime       @db.Timestamp(0)
  ordered_by   Int
  ordered_from Int
  orderdetails orderdetails[]
  stockmanager stockmanager   @relation(fields: [ordered_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Orders_StockManager1")
  supplier     supplier       @relation(fields: [ordered_from], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Orders_Supplier1")

  @@index([ordered_by], map: "fk_Orders_StockManager1_idx")
  @@index([ordered_from], map: "fk_Orders_Supplier1_idx")
}

model product {
  id             Int            @id @default(autoincrement())
  selling_count  Int            @default(0)
  Shoes_id       Int
  Sizes_id       Int
  images         images[]
  orderdetails   orderdetails[]
  shoeshascolors shoeshascolors @relation(fields: [Shoes_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Product_Shoes_has_Colors1")
  sizes          sizes          @relation(fields: [Sizes_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Product_Sizes1")
  stockdetails   stockdetails[]

  @@index([Shoes_id], map: "fk_Product_Shoes_has_Colors1_idx")
  @@index([Sizes_id], map: "fk_Product_Sizes1_idx")
}

model role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(45)
  user user[]
}

model shoes {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(45)
  brand_id         Int
  brand            brand              @relation(fields: [brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Shoes_Brand1")
  shoeshascategory shoeshascategory[]
  shoeshascolors   shoeshascolors[]

  @@index([brand_id], map: "fk_Shoes_Brand1_idx")
}

model shoeshascategory {
  id          Int      @id @default(autoincrement())
  Shoes_id    Int
  Category_id Int
  category    category @relation(fields: [Category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Shoes_has_Category_Category1")
  shoes       shoes    @relation(fields: [Shoes_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Shoes_has_Category_Shoes1")

  @@index([Category_id], map: "fk_Shoes_has_Category_Category1_idx")
  @@index([Shoes_id], map: "fk_Shoes_has_Category_Shoes1_idx")
}

model shoeshascolors {
  id        Int       @id @default(autoincrement())
  Shoes_id  Int
  Colors_id Int
  product   product[]
  colors    colors    @relation(fields: [Colors_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Shoes_has_Colors_Colors1")
  shoes     shoes     @relation(fields: [Shoes_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Shoes_has_Colors_Shoes1")

  @@index([Colors_id], map: "fk_Shoes_has_Colors_Colors1_idx")
  @@index([Shoes_id], map: "fk_Shoes_has_Colors_Shoes1_idx")
}

model sizes {
  id      Int       @id @default(autoincrement())
  length  String    @db.VarChar(20)
  size    String    @db.VarChar(20)
  product product[]
}

model stock {
  id              Int            @id @default(autoincrement())
  bought_at       DateTime       @db.Timestamp(0)
  stock_value     Float
  paid_amount     Float
  Supplier_id     Int
  StockManager_id Int
  stockmanager    stockmanager   @relation(fields: [StockManager_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Stock_StockManager1")
  supplier        supplier       @relation(fields: [Supplier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Stock_Supplier1")
  stockdetails    stockdetails[]

  @@index([StockManager_id], map: "fk_Stock_StockManager1_idx")
  @@index([Supplier_id], map: "fk_Stock_Supplier1_idx")
}

model stockdetails {
  id            Int           @id @default(autoincrement())
  qty           Int
  buying_price  Float
  selling_price Float
  barcode       String        @db.VarChar(255)
  Product_id    Int
  Stock_id      Int
  invoiceitem   invoiceitem[]
  product       product       @relation(fields: [Product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_StockDetails_Product1")
  stock         stock         @relation(fields: [Stock_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_StockDetails_Stock1")

  @@index([Product_id], map: "fk_StockDetails_Product1_idx")
  @@index([Stock_id], map: "fk_StockDetails_Stock1_idx")
}

model stockmanager {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(255)
  email    String   @unique(map: "email_UNIQUE") @db.VarChar(255)
  nic      String   @unique(map: "nic_UNIQUE") @db.VarChar(20)
  mobile   String   @db.VarChar(11)
  userName String   @unique(map: "userName_UNIQUE") @db.VarChar(45)
  password String   @db.VarChar(45)
  orders   orders[]
  stock    stock[]
}

model supplier {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  email             String              @unique(map: "email_UNIQUE") @db.VarChar(255)
  mobile            String              @db.VarChar(11)
  nic               String              @db.VarChar(20)
  address           String              @db.VarChar(255)
  created_at        DateTime            @db.Timestamp(0)
  deleted_at        DateTime?           @db.Timestamp(0)
  bankDetails_id    Int
  orders            orders[]
  stock             stock[]
  bankdetails       bankdetails         @relation(fields: [bankDetails_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Supplier_bankDetails1")
  supplierhasbrands supplierhasbrands[]

  @@index([bankDetails_id], map: "fk_Supplier_bankDetails1_idx")
}

model supplierhasbrands {
  id          Int      @id @default(autoincrement())
  Brand_id    Int
  Supplier_id Int
  brand       brand    @relation(fields: [Brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_SupplierhasBrands_Brand1")
  supplier    supplier @relation(fields: [Supplier_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_SupplierhasBrands_Supplier1")

  @@index([Brand_id], map: "fk_SupplierhasBrands_Brand1_idx")
  @@index([Supplier_id], map: "fk_SupplierhasBrands_Supplier1_idx")
}

model user {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  mobile      String    @db.VarChar(10)
  nic         String    @db.VarChar(20)
  email       String    @db.VarChar(255)
  userName    String    @db.VarChar(45)
  password    String    @db.VarChar(45)
  last_active DateTime? @db.Timestamp(0)
  created_at  DateTime  @db.Timestamp(0)
  deleted_at  DateTime? @db.Timestamp(0)
  role_id     Int
  role        role      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_User_Role")

  @@index([role_id], map: "fk_User_Role_idx")
}

model wishlist {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @db.Timestamp(0)
  Customer_id Int
  customer    customer @relation(fields: [Customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Wishlist_Customer1")

  @@index([Customer_id], map: "fk_Wishlist_Customer1_idx")
}
